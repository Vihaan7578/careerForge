// Resume Context - The Brain of the Operation
// This file is basically a shared storage system that ALL components can access
// Think of it like a Google Drive folder that everyone in your project can read from and write to

import React, { createContext, useContext, useState } from 'react';

// Create the context - this is like creating an empty storage box
// We'll fill it with resume data later
const ResumeContext = createContext();

// useResume - This is a custom hook (fancy function) that components can call to get resume data
// It's like asking "hey, can I get access to that shared storage?"
export const useResume = () => {
  const context = useContext(ResumeContext);
  
  // If someone tries to use this hook outside of ResumeProvider, yell at them
  // It's like trying to withdraw money from a bank account that doesn't exist
  if (!context) {
    throw new Error('useResume must be used within a ResumeProvider');
  }
  
  return context;
};

// ResumeProvider - This wraps around our entire app and provides the resume data to everyone
// The {children} parameter means "all the components inside this provider"
export const ResumeProvider = ({ children }) => {
  
  // Track which step the user is on (0 = Personal Info, 1 = Experience, etc.)
  // Starts at 0 because... arrays start at 0. Thanks, computer science.
  const [currentStep, setCurrentStep] = useState(0);
  
  // Track which template they've selected ('modern' is the default)
  // If they don't pick one, they get Modern by default
  const [selectedTemplate, setSelectedTemplate] = useState('modern');
  
  // This is the BIG one - all the actual resume data lives here
  // It's structured like a real resume: personal info, experience, education, etc.
  const [resumeData, setResumeData] = useState({
    // Basic info - name, email, phone, etc.
    personalInfo: {
      fullName: '',         // Their full name (duh)
      email: '',            // Email address
      phone: '',            // Phone number
      location: '',         // City, State/Country
      linkedin: '',         // LinkedIn profile URL
      portfolio: '',        // Personal website or portfolio
      profileImage: '',     // Profile picture (stored as base64 string)
    },
    
    // Professional summary/About Me section - generated by AI or written manually
    summary: '',
    
    // Array of work experiences - each job is an object with title, company, dates, etc.
    experience: [],
    
    // Array of education entries - schools, degrees, dates
    education: [],
    
    // Skills split into two categories
    skills: {
      technical: [],      // Technical skills like "React", "Python", "Excel"
      soft: [],           // Soft skills like "Leadership", "Communication"
    },
    
    // Array of certifications (AWS Certified, Google Analytics, etc.)
    certifications: [],
    
    // Array of projects (personal projects, open source contributions, etc.)
    projects: [],
    
    // Additional stuff like awards, languages, volunteer work
    additionalInfo: [],
  });

  // AI suggestions - feedback from the AI about their resume
  // Separate from resumeData because it's not part of the actual resume
  const [aiSuggestions, setAiSuggestions] = useState({
    summary: '',                    // AI-generated professional summary
    experienceImprovements: {},     // Suggestions for improving job descriptions
    missingDetails: [],             // What they forgot to add
    score: null,                    // Overall resume score (0-100)
  });

  // ========== UPDATE FUNCTIONS ==========
  // These functions let components modify the resume data
  // Think of them as "deposit" and "withdraw" functions for our data bank

  // Update a single field in personal info (like changing just the email)
  // 'field' is what to update ('email', 'phone', etc.)
  // 'value' is the new value
  const updatePersonalInfo = (field, value) => {
    setResumeData(prev => ({
      ...prev,                    // Keep everything else the same
      personalInfo: {
        ...prev.personalInfo,     // Keep other personal info fields the same
        [field]: value,           // Update just this one field
      },
    }));
  };

  // Update the professional summary
  // Simple one - just replace the entire summary with a new one
  const updateSummary = (summary) => {
    setResumeData(prev => ({
      ...prev,          // Keep everything else
      summary,          // Update just the summary
    }));
  };

  // Add a new work experience to the list
  // This ADDS to the array, doesn't replace it
  const addExperience = (experience) => {
    setResumeData(prev => ({
      ...prev,
      experience: [...prev.experience, experience],   // Spread existing + add new one
    }));
  };

  // Update an existing work experience
  // 'index' tells us which experience to update (0 = first job, 1 = second job, etc.)
  // We map through all experiences and only update the one at that index
  const updateExperience = (index, experience) => {
    setResumeData(prev => ({
      ...prev,
      experience: prev.experience.map((exp, i) => 
        i === index ? experience : exp    // If this is the right index, replace it, otherwise keep it
      ),
    }));
  };

  // Remove a work experience from the list
  // filter() keeps everything EXCEPT the item at this index
  const removeExperience = (index) => {
    setResumeData(prev => ({
      ...prev,
      experience: prev.experience.filter((_, i) => i !== index),
    }));
  };

  // Add a new education entry
  // Same pattern as addExperience
  const addEducation = (education) => {
    setResumeData(prev => ({
      ...prev,
      education: [...prev.education, education],
    }));
  };

  // Update an existing education entry
  // Same pattern as updateExperience
  const updateEducation = (index, education) => {
    setResumeData(prev => ({
      ...prev,
      education: prev.education.map((edu, i) => 
        i === index ? education : edu
      ),
    }));
  };

  // Remove an education entry
  // Same pattern as removeExperience
  const removeEducation = (index) => {
    setResumeData(prev => ({
      ...prev,
      education: prev.education.filter((_, i) => i !== index),
    }));
  };

  // Update skills (either technical or soft)
  // 'type' is either 'technical' or 'soft'
  // 'skills' is the new array of skills
  const updateSkills = (type, skills) => {
    setResumeData(prev => ({
      ...prev,
      skills: {
        ...prev.skills,         // Keep the other skill type the same
        [type]: skills,         // Update just this skill type
      },
    }));
  };

  // Add a project
  // Projects include things like personal websites, open source contributions, etc.
  const addProject = (project) => {
    setResumeData(prev => ({
      ...prev,
      projects: [...prev.projects, project],
    }));
  };

  // Add a certification
  // Like "AWS Certified Developer" or "Google Analytics Certification"
  const addCertification = (certification) => {
    setResumeData(prev => ({
      ...prev,
      certifications: [...prev.certifications, certification],
    }));
  };

  // Add additional info
  // This could be awards, languages, volunteer work, publications, etc.
  const addAdditionalInfo = (info) => {
    setResumeData(prev => ({
      ...prev,
      additionalInfo: [...prev.additionalInfo, info],
    }));
  };

  // Remove an additional info item
  const removeAdditionalInfo = (index) => {
    setResumeData(prev => ({
      ...prev,
      additionalInfo: prev.additionalInfo.filter((_, i) => i !== index),
    }));
  };

  // ========== THE VALUE OBJECT ==========
  // This object contains EVERYTHING that components can access
  // It's like a menu at a restaurant - here's everything you can order
  const value = {
    // State values (the data)
    currentStep,           // Which step they're on
    setCurrentStep,        // Function to change steps
    selectedTemplate,      // Which template they chose
    setSelectedTemplate,   // Function to change templates
    resumeData,            // ALL the resume data
    setResumeData,         // Function to replace all resume data (rarely used)
    aiSuggestions,         // AI feedback and suggestions
    setAiSuggestions,      // Function to update AI suggestions
    
    // Helper functions (the actions)
    updatePersonalInfo,    // Update name, email, phone, etc.
    updateSummary,         // Update professional summary
    addExperience,         // Add a job
    updateExperience,      // Edit a job
    removeExperience,      // Delete a job
    addEducation,          // Add education
    updateEducation,       // Edit education
    removeEducation,       // Delete education
    updateSkills,          // Update skills
    addProject,            // Add a project
    addCertification,      // Add a certification
    addAdditionalInfo,     // Add awards, languages, etc.
    removeAdditionalInfo,  // Remove those things
  };

  // Return the Provider component with all this data
  // Everything inside <ResumeContext.Provider> (the {children}) can now access 'value'
  return (
    <ResumeContext.Provider value={value}>
      {children}
    </ResumeContext.Provider>
  );
};
